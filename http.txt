{{{ HTTP - HyperText Transfer Protocol

- 1996 (1.0), 1999 (1.1), 2015 (2.0)
- RFC 2616 (1.1), RFC 7540 (2.0)

}}}

{{{ HTTP 1.1

- simple, human readable
- request - response
- 1st line + headers + payload
- user agent (browser) <=> webserver
- extensible (custom headers can be added)
- stateless

}}}

{{{ Request - overview

# 1st line - method + resource + version

GET /index.html HTTP/1.1

# headers - one per line, in "Header: header value" format

Host: euedge.com
User-Agent: browser Mozilla/5.0 egyeb hazugsagok
Accept: text/html, text/plain;q=0.5, text/*;q=0.3

# payload/body (anything that is separated from the header by 2 line breaks)

Example:
'''
POST /api/login HTTP/1.1
Host: akarmi.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 35

username=cica&password=ezittajelszo
'''

}}}

{{{ Request - methods

- GET - to retrieve data (should not have a body)
  - some information might be sent with the resource - as query parameters - but it's size is limited
- HEAD - same as GET, but should not get the actual data, only the headers
- POST - send data (in the body) to the server, causing state change or sideeffects on the server
  - for example loging in
  - adding a new entity to some resource
- PUT - similar to POST, but usually used to change/replace entities, should be "idempotent" (repeating the request should result in the same state)
- DELETE - to delete a resource
- OPTIONS - set/get communication options (used for CORS for example)

(CONNECT - for proxy connection, TRACE - for debugging, PATCH - partial modifications to a resource)

}}}

{{{ Response - overview

# 1st line - version + status code + status message

HTTP/1.1 200 OK

# headers (same as for the request)

Date: Thu, 29 Sept 2017 13:30:02 GMT
Server: netcatba masolok
Content-Type: text/html
Content-Length: 12345

# payload/body (same as for the request)

<!DOCTYPE html><html>...

}}}

{{{ Response - status codes

# 1xx - information
  - 100 Continue - for cases like sending huge amount of data the client could ask for this via "Expect: 100-continue" header
  - 101 Switching protocols - client can ask protocol switch via the "Upgrade" header (for HTTP/2 or websocket)
# 2xx - success
  - 200 OK
  - 201 Created - a new resource has been created (by PUT or POST), the location of the new resource might be found in the "Location" header of the response
  - 202 Accepted - the request was accepted, but it is still processed (in an async way)
  - 203 Non-Authorative Information - a 200 response has been modified by a proxy for example
  - 204 No Content
  - 205 Reset Content
  - 206 Partial Content - only a part of the response was sent (the client used the "Range" header)
# 3xx - redirect
  - 300 Multiple Choices - the resource is available in multiple instances (like format, language, ...) and the client have not used an 'Accept-*' header for example
  - 301 Moved Permanently - the resource has been moved to the location indicated by the "Location" header - the client (browser/search engine) can update the link for that resource since this is permanent
  - 302 Found - temporary redirection ("Location" header) - for example user is logged in in the login page successfully, redirecting to the index page
  - 303 See Other - usually can be a response for a POST or PUT request, but the redirect don't go to the new resource but to another page like confirmation or progress
  - 304 Not Modified - "redirection to browser cache", if the client uses something like "If-Modified-Since" the server could reply that the resource is up-to-date in the client cache
  - 307 Temporary Redirect - same as 302, but the method and the body won't be changed (for 302 some clients change the method to GET)
  - 308 Permanent Redirect - same as 301 (see 307-302 relation)
# 4xx - client error
  - 400 Bad Request - the server could not understand the request
  - 401 Unauthorized - client should authenticate itself to access this resource (might have a "WWW-Authenticate" header)
  - 403 Forbidden - even with re-authentication, the client won't have access to this resource
  - 404 Not Found - no resource is on that location
  - 405 Method Not Allowed - method not supported for the given resource
  - 406 Not Acceptable - the server cannot send the response in a format that the client accepts ("Accept-*" headers)
  - 407 Proxy Authentication Required - sent by a proxy server (can have a "Proxy-Authenticate" header)
  - 408 Request Timeout - with "Connection: close" header, the server indicates that it closes this connection
  - 409 Conflict
  - 410 Gone - like 404, but the server is sure that the resource was there, but it isn't anymore
  - 411 Length Required - the client must include the "Content-Length" header
  - 412 Precondition Failed - for non-GET/HEAD responses when for example "If-Unmodified-Since" fails
  - 413 Payload Too Large
  - 414 URI Too Long
  - 415 Unsupported Media Type - "Content-Type"
  - 416 Range Not Satisfiable - "Range"
  - 417 Expectation Failed - "Expect"
  - 418 I'm a teapot - actually in an RFC (April Fools' joke) - Any attempt to brew coffee with a teapot should result in the error code "418 I'm a teapot".
  - 426 Upgrade Required - "Upgrade"
  - 429 Too Many Requests
  - 431 Request Header Fields Too Large
  - 451 Unavailable For Legal Reasons
# 5xx - server error
  - 500 Internal Server Error - "something went wrong", unhandled exception, ...
  - 501 Not Implemented - the request method is not implemented
  - 502 Bad Gateway - the proxy/gateway got invalid response from the upstream server
  - 503 Service Unavailable - the server is not yet ready (weblogic is starting up)
  - 504 Gateway Timeout - the proxy/gateway cannot reach the upstream server
  - 505 HTTP Version Not Supported
  - 511 Network Authentication Required - "free wifi"

}}}

{{{ Connection management (HTTP/1.1)

# Short lived connections
  - establish => request -> response => close
  - HTTP/1.0, or HTTP/1.1, if "Connection: close" header present
  - Cons: TCP connection establishment is "slow", and cannot "warm up" (window size adjustment, etc.)*

# Persistent connections
  - establish => req1 -> res1; req2 -> res2; ... => close
  - server may use "Keep-Alive: timeout=<t>, max=<m>"
  - HTTP/1.1 default
  - Cons: can be used for DoS attacks

# Pipelining
  - establish => req1, req2, req3 -> res1, res2, res3 => close
  - not enabled by major browsers
    - lot of buggy proxies
    - hard to implement
    - HOL (head of line) problem

Connection management is hop-by-hop (not end-to-end), related headers might be changed by a proxy.

# Domain sharding (deprecated, use HTTP/2 instead)
  - a browser opens only 6(?) parallel connections to a domain
  - use multiple domain names for resources (like images), www1.example.com / www2.example.com / ...
  - only if HTTP/2 is not an option

* [[[
Example RTT:
- Bp(EUE) <=> BIX: ~2ms
- Bp(EUE) <=> Ireland(AWS): ~20ms
- Bp(EUE) <=> NYC(FD): ~100ms

Connection establishment (TCP) takes ~RTT*2 time.
Even using an AWS like CDN establishing a single TCP connection takes the same time (~40ms) as downloading 100kb data on an average 3G connection. 
  
QUIC - Quick UDP Internet Connections - uses UDP instead of TCP, "no" connection establishment, custom packet loss handling, much better for streaming content.
]]]

}}}

{{{ Proxy servers

# Forward proxies
- "gateway" for clients
- to reduce and control bandwith used by a group (like company)

# Reverse proxies
- for the server
- load balancing, content caching, compression, ssl termination

# Headers used by proxies to forward client information
- Via: <protocol version> <proxy host> (can be a list)
- Forwarded: by=<proxy>; for=<client>; host=<the Host header>; proto=<http|https>
(alternative de-facto standard versions)
- X-Forwarded-For: <client>, <proxy1>, <proxy2>, ...
- X-Forwarded-Host
- X-Forwarded-Proto

# HTTP tunneling
- CONNECT method

}}}

{{{ Compression

# End-to-end compression
  - client: "Accept-Encoding: br, gzip"
  - server: "Content-Encoding: gzip" + "Vary: Accept-Encoding"

# Hop-by-hop compression (very rare)
  - a proxy is involved, and the proxy (and the server) supports better compression than the client
  - proxy1 (request): "TE: gzip, br"
  - proxy2/server (response): "Transfer-Encoding: gzip"

}}}

{{{ Cookies

The server can set cookies via the 'Set-Cookie' header, that are sent back by the client in the 'Cookie' header.

<name>=<value>; [directives separated by ;]

The 'Cookie' header can have a ; separated list of cookies.

# Set-Cookie

One cookie per 'Set-Cookie' header, but multiple headers are allowed.

# Directives

- Expires=<date>
  - the cookie expires on <date>, the client should remove it afterwards
  - if not set, the cookie will have a lifetime of the session ("dies" when the tab is closed)
- Max-Age=<seconds>
  - have precedence over 'Expires'
- Domain=<domain>
  - if not set current domain is used (subdomains not included)
  - if set, subdomains are included (no need for a leading .)
- Path=<path>
  - the root of the path for the cookie
- Secure
  - the cookie is only sent over secure (HTTPS) connection
- HttpOnly
  - not accessible via JS (document.cookie, XMLHttpRequest, Request)

}}}

{{{ Caching

# Why?

Don't download files that have not been changed.

# Problem

Most files do change sometimes.
Don't trust the browsers.

# Cache levels

- browser cache
  - size limit
  - easy to turn off manually
- caching proxies, CDNs
  - no way to turn it off

# Typical cachable content

- simple documents, images (GET => 200 OK)
- permanent redirecs (GET => 301, 308)
- some error responses (GET => 404)
- non-GET responses, if a cache-key like header is defined

# Cache-Control header

- don't cache at all
  - "no-store, no-cache, must-revalidate"
- browser might store it (for "back" button), requests validation before using the cached copy
  - "no-cache"
- single user (browser) only
  - "private"
- can be stored in a shared cache (proxy)
  - "public"
- expiration / freshness
  1. "max-age=36000" (10 hours)
  2. "Expires" header with a date (client side date, not very reliable)
- validation (see below) required
  - "must-revalidate"

(Pragma header is for HTTP/1.0, don't use it anymore.)

# Validation

- ETags
  - "strong" validator
  - server sends "ETag"
  - client uses "If-None-Match" w/ etag value
- Last-Modified
  - "weak" validator
  - server sends "Last-Modified" header with date
  - client uses "If-Modified-Since" header

- 304 Not Modified - sent back if something matches (w/o response body)
- 200 OK - sent back w/ response body otherwise

# Vary

If the server uses the "Vary" header, the client must include the given heaeders when caching.
For example: "Vary: User-Agent" means the response could be different for different "User-Agent" values, cache accordingly.

}}}

{{{ HTTP authentication

- 401 Unauthorized
  - w/ WWW-Authenticate: <type> realm=<realm>
- Client responds w/ "Authorization: <type> <credentials>" header

# Auth types
- Basic - base64 encoded credentials
- Bearer - OAuth 2.0 token
- Digest - md5/sha hashed credentials

# USE ONLY OVER HTTPS/SSL
- MITM attacks possible for all of them
- attacker can get the password in case of Basic auth

# Easy to use
- supported by all major webservers
- URLs can contain the credentials (https://username:password@www.example.com/)

}}}

{{{ Content negotiation

The client can specify some properties of the response which it prefers, using the "Accept-*" headers.
The response should contain the "Vary" header with the "Accept-*" headers involved or might use 300 (Multiple Choices) or 406 (Not Acceptable) response status codes (their response body is not standardized).

- Accept: <MIME_type>/<MIME_subtype>
- Accept-Charset: <charset>
- Accept-Encoding: <encoding>
- Accept-Language: <language code>

All headers above can contain a list of (optionally) weighted options.
For example if the client prefers german, but can read english (with 0.8 priority) or hungarian (with 0.4 priority) as well, it can use:

Accept-Language: en, de;q=0.8, hu;q=0.4

}}}

{{{ HTTP Security

# Access control - CORS (Cross Origin Resource Sharing)
- cross origin request: when a resource (image, css, whatever) is served from a different domain than the initiator HTML
- same origin: the "scheme/host/port" tuple should be the same
  - document.domain might be set to a parent/subdomain

- embedding is typically allowed (with HTML tags like <script>, <link>, <img>, ...)
- writing is allowed (redirects, form submissions, simple links)
- reads are not allowed by default (and to prevent leaks by embedding, some properties of embedded cross-origin resources are vorbidden to read, like image pixel data)

## CORS - to enable cross origin access controlled by the server for
  - XMLHttpRequest or Fetch
  - web fonts
  - webgl textures
  - image/video data drawn to canvas
  - ...

## CORS communication
  - simple requests
    - does not trigger CORS preflight
    - "classic" browser initiated requests like GET, POST w/ form like content type
    - response should contain "Access-Control-Allow-Origin" header with the initiator Origin (or '*')
  - preflighted requests
    - anything that isn't a simple request
    - preflight request
      - OPTIONS method to the request URI
        - Access-Control-Request-* headers (-Origin, -Method, -Headers)
    - preflight response
      - 200 OK (or 403)
        - Access-Control-Allow-* headers (-Origin, -Methods, -Headers)
    - normal request-response pair after preflight
  - CORS w/ credentials (cookies or auth tokens)
    - XMLHttpRequest().withCredentials = true
    - response (simple or preflight) should have the 'Access-Control-Allow-Credentials: true' header

# CSP - Content Security Policy
  - when not defined same origin policy is used
  - 'Content-Security-Policy' HTTP header or <meta http-equiv="Content-Security-Policy" content="..."> tag
  - prevent and/or report XSS
  - 'Content-Security-Policy-Report-Only' - for testing/reporting (report-uri parameter should be provided)

## CSP examples
  - default-src 'self'
  - default-src 'self' *.example.com
  - default-src 'self'; img-src *; script-src scripts.example.com
  - ...

# HPKP - HTTP Public Key Pinning
  - 'Public-Key-Pins(-Report-Only)' header
  - tells the client to trust only in the given public key for this server
  - prevents MITM attacks that uses forged certificates

# HSTS - HTTP Strict Transport Security
  - 'Strict-Transport-Security' header 'max-age', 'includeSubdomains'
  - tells the client that it should use secure channel (HTTPS) to communicate with this server
  - tries to prevent MITM attacks with HTTPS termination, or attacks hijacking the HTTP->HTTPS redirects

# X-Content-Type-Options: nosniff
  - if set, the client should block requests if it's a 
    - "style" and the MIME type is not "text/css"
    - "script" and the MIME type is not javascript like

# X-Frame-Options
  - client should accept <frame>, <iframe> or <object> sources according to this setting
  - DENY, SAMEORIGIN, ALLOW-FROM <url>

# X-XSS-Protection
  - tries to prevent XSS
  - no need if 'unsafe-inline' CSP policy is set
  - options
    - 0 - disables XSS filtering (why?)
    - 1 - enables XSS filtering with sanitization (usually browser default)
    - 1;mode=block - blocks page instead of satitizing the content
    - 1;report=<uri> - sanitize and report to uri

}}}

{{{ HTTP/2

- plain text -> binary
- new connection model
  - streams ~ connection
  - messages ~ a request/response
  - frames - smallest unit of communication
- all communication is performed over a single TCP connection, with the possibility of multiple bidirectional streams
- streams can be prioritized
- flow control - any party can "slow down" the communication to be able process the incoming information
- server push - send CSS/JS/fonts before the client knows about them [buggy ATM in ~ every browser - link[rel=preload] is more reliable]
- header compression - reuse headers that have not been changed (many of them)

}}}

# vim: foldmethod=marker
