{{{ Webassembly with Rust

Webassembly
- open standard by W3C
- size and load-time efficient
- hardware independent
- sandboxed
- not only for the web

Rust
- "systems programming language"
- by Mozilla
- guaranteed memory safety (no null, "borrowing")
- threads without data races
- trait-based generics
- pattern matching
- type inference
- efficient C bindings

}}}

{{{ The Rust toolchain

# rustup [ https://www.rustup.rs/ ] - Rust toolchain installer

- "toolchain multiplexer"
- like 'nvm' for node, possibility to install/manage multiple versions of the rust toolchain
- can install/update rustc, cargo, rustup (itself), cross-compiler targets, ...

$ rustup install stable
$ rustup default stable
$ rustup update
$ rustup self update

# rustc

The rust compiler.

$ rustc main.rs -o hello_world

... but you don't have to execute it manually, since there is:

# cargo

Manages project dependencies, compiles project, executes unit tests, ...

$ cargo new hello_world --bin     # create a new binary project called hello_world (with git init)
$ cargo run
$ cargo test
$ cargo build --release

}}}

{{{ Webassembly target

# Emscripten SDK

$ git clone https://github.com/juj/emsdk.git
$ cd emsdk
$ ./emsdk install latest
$ ./emsdk activate latest

# wasm target

$ rustup target add wasm32-unknown-emscripten

}}}

{{{ Building rust for the browser

$ cargo build --release --target wasm32-unknown-emscripten

# Include it in HTML

```
<script type="text/javascript" src="./hello-world.js"></script> <!-- wasm loader generated by the build -->
<script type="text/javascript">
  Module.addOnInit(function () {
    console.log('Module ready!');
  });
</script>
```

This will automatically execute `main()`.

# Exporting functions

Mark the functions to export as public, and ask the linker not to mangle them:
```
#[no_mangle]
pub fn demo_function(x: u32) -> u32 {
  // do whatever
}
```

Into `.cargo/config`:
```
[target.wasm32-unknown-emscripten]
rustflags = [
    "-Clink-args=-s EXPORTED_FUNCTIONS=['_demo_function'] -s ASSERTIONS=1",
]
```

# Use them from JS
```
var rust_demo_fn = Module.cwrap('demo_function', 'number', ['number']); // M.cwrap('fn name', 'return type', ['paremeter types', ...]) 
rust_demo_fn(12);
```

}}}

{{{ Demo

https://bitbucket.org/dyuri/rust-wasm-hello-test

}}}

# vim: foldmethod=marker
